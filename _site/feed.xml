<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.5.2">Jekyll</generator><link href="/p/feed.xml" rel="self" type="application/atom+xml" /><link href="/p/" rel="alternate" type="text/html" /><updated>2019-03-05T12:23:25+08:00</updated><id>/p/</id><title type="html">TommyZhao</title><subtitle></subtitle><entry><title type="html">如何解决git squash merge冲突</title><link href="/p/gitl/2019/03/01/git-squash-merge.html" rel="alternate" type="text/html" title="如何解决git squash merge冲突" /><published>2019-03-01T00:00:00+08:00</published><updated>2019-03-01T00:00:00+08:00</updated><id>/p/gitl/2019/03/01/git-squash-merge</id><content type="html" xml:base="/p/gitl/2019/03/01/git-squash-merge.html">&lt;h1 id=&quot;如何解决git-squash-merge冲突&quot;&gt;如何解决git squash merge冲突&lt;/h1&gt;

&lt;h2 id=&quot;背景&quot;&gt;背景&lt;/h2&gt;

&lt;p&gt;公司项目使用了git大仓库管理代码，同一个仓库下会有多个业务代码。&lt;/p&gt;

&lt;p&gt;平日里近百个开发在里面提交变更.&lt;/p&gt;

&lt;p&gt;为了保证master的commit记录整洁，在提交mr时默认开启了gitlab的‘Squash commits when merge request is accepted’。&lt;/p&gt;

&lt;p&gt;当有多部门系统开发时，有时会出现多部门同时基于一个非稳定分支开发（为了保持快速业务迭代）。&lt;/p&gt;

&lt;p&gt;比如基础部门从master切出新分支，开发基础API，这里标记为：dev_base，在目录dev/app/base下coding。&lt;/p&gt;

&lt;p&gt;当dev_base完成基础api开发，后部门A基于dev_base checkout一个分支：dev_a，在目录dev/app/a下coding，会引用dev/app/base的api。&lt;/p&gt;

&lt;p&gt;后续dev_base和dev_a并行开发。&lt;/p&gt;

&lt;p&gt;但是当dev_base开发完成，使用squash commits功能合并了master后。&lt;/p&gt;

&lt;p&gt;这时dev_a合并master时，会在目录dev/app/base下存在大量冲突，然而他们从未变更过这个目录。&lt;/p&gt;

&lt;h2 id=&quot;如何正确解决这个冲突&quot;&gt;如何正确解决这个冲突：&lt;/h2&gt;

&lt;p&gt;先给出答案：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;git merge –squash dev_base &lt;br /&gt;
git pull origin master  &lt;br /&gt;
git push origin dev_a&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;这里发生了什么&quot;&gt;这里发生了什么？&lt;/h2&gt;

&lt;p&gt;todo&lt;/p&gt;</content><author><name></name></author><summary type="html">如何解决git squash merge冲突</summary></entry><entry><title type="html">Java项目问题排查规则</title><link href="/p/mvn/2018/07/10/java-product-troubshoting.html" rel="alternate" type="text/html" title="Java项目问题排查规则" /><published>2018-07-10T09:34:38+08:00</published><updated>2018-07-10T09:34:38+08:00</updated><id>/p/mvn/2018/07/10/java-product-troubshoting</id><content type="html" xml:base="/p/mvn/2018/07/10/java-product-troubshoting.html">&lt;h2 id=&quot;问题分类&quot;&gt;问题分类&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;CPU占用率高&lt;/li&gt;
  &lt;li&gt;内存泄露&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;cpu占用率高&quot;&gt;CPU占用率高&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;在容器内执行top命令，找到cpu使用率高的pid&lt;/li&gt;
  &lt;li&gt;执行top -pid xxx，查看当前pid2的具体信息&lt;/li&gt;
  &lt;li&gt;按照cpu占用率排序，找到占有率最高的pid&lt;/li&gt;
  &lt;li&gt;使用jstack pid打印当前java线程的执行情况&lt;/li&gt;
  &lt;li&gt;命令行printf %0x pid2查看对应的16进制nid&lt;/li&gt;
  &lt;li&gt;这jstack的thread dump中观察对应的栈信息&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;内存使用率高&quot;&gt;内存使用率高&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;jps -lvm找到当前容器运行的java线程&lt;/li&gt;
  &lt;li&gt;找到对应问题的线程后执行，jmap -heap:format=b file=mem.bin pid&lt;/li&gt;
  &lt;li&gt;使用mat或者jprofiler导入dump后，分析&lt;/li&gt;
  &lt;li&gt;观察占用率较高的对象分布，基本可以确定问题&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">问题分类</summary></entry><entry><title type="html">Deploy jar to mvn nexus repository</title><link href="/p/mvn/2018/01/02/mvn-deplpy-to-nexus.html" rel="alternate" type="text/html" title="Deploy jar to mvn nexus repository" /><published>2018-01-02T17:34:38+08:00</published><updated>2018-01-02T17:34:38+08:00</updated><id>/p/mvn/2018/01/02/mvn-deplpy-to-nexus</id><content type="html" xml:base="/p/mvn/2018/01/02/mvn-deplpy-to-nexus.html">&lt;h1 id=&quot;deploy-jar-to-mvn-nexus-repository&quot;&gt;Deploy jar to mvn nexus repository&lt;/h1&gt;

&lt;h2 id=&quot;add-server-config-to-settingsxml&quot;&gt;Add server config to settings.xml&lt;/h2&gt;
&lt;p&gt;进入.m2文件夹，更改settings.xml，添加server配置&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &amp;lt;server&amp;gt;
       &amp;lt;id&amp;gt;my-nexus-release-server&amp;lt;/id&amp;gt;
       &amp;lt;username&amp;gt;xxxx&amp;lt;/username&amp;gt;
       &amp;lt;password&amp;gt;xxxx&amp;lt;/password&amp;gt;
     &amp;lt;/server&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2 id=&quot;更改pomxml&quot;&gt;更改pom.xml&lt;/h2&gt;
&lt;p&gt;新增deploy仓库配置：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;lt;distributionManagement&amp;gt;
		&amp;lt;repository&amp;gt;
			&amp;lt;id&amp;gt;my-nexus-release-server&amp;lt;/id&amp;gt;
			&amp;lt;name&amp;gt;Internal Releases&amp;lt;/name&amp;gt;
			&amp;lt;url&amp;gt;http://nexus.my.co/content/repositories/releases&amp;lt;/url&amp;gt;
		&amp;lt;/repository&amp;gt;
		&amp;lt;snapshotRepository&amp;gt;
			&amp;lt;id&amp;gt;my-nexus-snapshots-server&amp;lt;/id&amp;gt;
			&amp;lt;name&amp;gt;Internal Snapshots&amp;lt;/name&amp;gt;
			&amp;lt;url&amp;gt;http://nexus.my.co/content/repositories/snapshots&amp;lt;/url&amp;gt;
		&amp;lt;/snapshotRepository&amp;gt;
	&amp;lt;/distributionManagement&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;如果要上传source包，新增：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;plugin&amp;gt;
    &amp;lt;artifactId&amp;gt;maven-source-plugin&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;3.0.1&amp;lt;/version&amp;gt;
    &amp;lt;configuration&amp;gt;
        &amp;lt;attach&amp;gt;true&amp;lt;/attach&amp;gt;
    &amp;lt;/configuration&amp;gt;
    &amp;lt;executions&amp;gt;
        &amp;lt;execution&amp;gt;
            &amp;lt;phase&amp;gt;compile&amp;lt;/phase&amp;gt;
            &amp;lt;goals&amp;gt;
                &amp;lt;goal&amp;gt;jar&amp;lt;/goal&amp;gt;
            &amp;lt;/goals&amp;gt;
        &amp;lt;/execution&amp;gt;
    &amp;lt;/executions&amp;gt;
&amp;lt;/plugin&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">Deploy jar to mvn nexus repository</summary></entry><entry><title type="html">Golang compile tool</title><link href="/p/go/2017/11/21/go-tool-compile.html" rel="alternate" type="text/html" title="Golang compile tool" /><published>2017-11-21T20:34:38+08:00</published><updated>2017-11-21T20:34:38+08:00</updated><id>/p/go/2017/11/21/go-tool-compile</id><content type="html" xml:base="/p/go/2017/11/21/go-tool-compile.html">&lt;h1 id=&quot;golang-compile-tool&quot;&gt;Golang compile tool&lt;/h1&gt;

&lt;h2 id=&quot;command&quot;&gt;Command&lt;/h2&gt;
&lt;p&gt;go tool compile -m -importmap go-common/log=tlog/vendor/go-common/log -D /Users/tommy/work/src/tlog  -I /Users/tommy/work/pkg/darwin_amd64  -S  main.go &amp;gt; test/test1.s&lt;/p&gt;</content><author><name></name></author><summary type="html">Golang compile tool</summary></entry><entry><title type="html">Golang获取本机IP地址</title><link href="/p/go/2017/08/29/go-internal-ip-address.html" rel="alternate" type="text/html" title="Golang获取本机IP地址" /><published>2017-08-29T20:34:38+08:00</published><updated>2017-08-29T20:34:38+08:00</updated><id>/p/go/2017/08/29/go-internal-ip-address</id><content type="html" xml:base="/p/go/2017/08/29/go-internal-ip-address.html">&lt;h1 id=&quot;golang获取本机ip地址&quot;&gt;Golang获取本机IP地址&lt;/h1&gt;

&lt;h2 id=&quot;引子&quot;&gt;引子&lt;/h2&gt;
&lt;p&gt;最近有次灰度发版后，发现RPC client获取到一个莫名的RPC server ip，通过服务注册的管理界面也能看到这个IP，排查后发现是当前灰度的机器，但是此机器的IP并不是注册的ip。&lt;/p&gt;

&lt;p&gt;排查代码后发现，先有注册的逻辑是这样的:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// InternalIP get internal ip.
func InternalIP() string {
	addrs, err := net.InterfaceAddrs()
	if err != nil {
		return &quot;&quot;
	}
	for _, a := range addrs {
		if ipnet, ok := a.(*net.IPNet); ok &amp;amp;&amp;amp; !ipnet.IP.IsLoopback() {
			if ipnet.IP.To4() != nil {
				return ipnet.IP.String()
			}
		}
	}
	return &quot;&quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;获取排除loopback地址后的ip。&lt;/p&gt;

&lt;p&gt;But, 诡异的地方就是这个IsLoopback:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// IsLoopback reports whether ip is a loopback address.
func (ip IP) IsLoopback() bool {
	if ip4 := ip.To4(); ip4 != nil {
		return ip4[0] == 127
	}
	return ip.Equal(IPv6loopback)
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;它是通过判断非127开头的IP来判断的。&lt;/p&gt;

&lt;p&gt;但是，我们服务灰度的这台物理机上绑定了个loopbakc，ip为：172开头。
so，逻辑失效。
发现问题后，更改了下获取本机IP的逻辑，如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// InternalIP get internal ip.
func InternalIP() string {
	inters, err := net.Interfaces()
	if err != nil {
		return &quot;&quot;
	}
	for _, inter := range inters {
		if !strings.HasPrefix(inter.Name, &quot;lo&quot;) {
			addrs, err := inter.Addrs()
			if err != nil {
				continue
			}
			for _, addr := range addrs {
				if ipnet, ok := addr.(*net.IPNet); ok &amp;amp;&amp;amp; !ipnet.IP.IsLoopback() {
					if ipnet.IP.To4() != nil {
						return ipnet.IP.String()
					}
				}
			}
		}
	}
	return &quot;&quot;
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">Golang获取本机IP地址</summary></entry><entry><title type="html">Kafka中有两种consumer接口</title><link href="/p/kafka/2017/04/27/kafka-consumer.html" rel="alternate" type="text/html" title="Kafka中有两种consumer接口" /><published>2017-04-27T20:34:38+08:00</published><updated>2017-04-27T20:34:38+08:00</updated><id>/p/kafka/2017/04/27/kafka-consumer</id><content type="html" xml:base="/p/kafka/2017/04/27/kafka-consumer.html">&lt;h1 id=&quot;kafka-consumer&quot;&gt;Kafka consumer&lt;/h1&gt;

&lt;p&gt;Kafka中有两种consumer接口，分别为Low-level API和High-levelAPI&lt;/p&gt;

&lt;h2 id=&quot;low-level-api--simpleconsumer&quot;&gt;Low-level API  SimpleConsumer&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;这套接口比较复杂的，使用者必须要考虑很多事情，优点就是对Kafka可以有完全的控制。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;high-level-api-zookeeperconsumerconnector&quot;&gt;High-level API ZookeeperConsumerConnector&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;High-level API使用比较简单，已经封装了对partition和offset的管理，默认是会定期自动commit offset，这样可能会丢数据的，因为consumer可能拿到数据没有处理完crash。 High-level API接口的特点，自动管理，使用简单，但是对Kafka的控制不够灵活。&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><summary type="html">Kafka consumer</summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="/p/jekyll/update/2017/04/27/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2017-04-27T10:34:38+08:00</published><updated>2017-04-27T10:34:38+08:00</updated><id>/p/jekyll/update/2017/04/27/welcome-to-jekyll</id><content type="html" xml:base="/p/jekyll/update/2017/04/27/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry></feed>