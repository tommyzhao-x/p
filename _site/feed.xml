<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://blog.zhaogangtao.cn//feed.xml" rel="self" type="application/atom+xml" /><link href="https://blog.zhaogangtao.cn//" rel="alternate" type="text/html" /><updated>2022-09-16T18:23:34+08:00</updated><id>https://blog.zhaogangtao.cn//feed.xml</id><title type="html">TommyZhao</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">golang node</title><link href="https://blog.zhaogangtao.cn//golang/2022/07/29/nodes.html" rel="alternate" type="text/html" title="golang node" /><published>2022-07-29T00:00:00+08:00</published><updated>2022-07-29T00:00:00+08:00</updated><id>https://blog.zhaogangtao.cn//golang/2022/07/29/nodes</id><content type="html" xml:base="https://blog.zhaogangtao.cn//golang/2022/07/29/nodes.html"><![CDATA[<h1 id="nodes">Nodes</h1>
<h2 id="gc">GC</h2>

<p>https://spin.atomicobject.com/2014/09/03/visualizing-garbage-collection-algorithms/
https://zhuanlan.zhihu.com/p/245214547</p>

<p>https://www.jianshu.com/p/2f94e9364ec4
https://www.jianshu.com/p/ebd8b012572e</p>

<p>https://www.ardanlabs.com/blog/2018/12/garbage-collection-in-go-part1-semantics.html
https://segmentfault.com/a/1190000012597428</p>

<p>https://www.jianshu.com/p/bfc3c65c05d1</p>

<p>https://golang.design/under-the-hood/zh-cn/part2runtime/ch08gc/sweep/
https://zhuanlan.zhihu.com/p/74853110
https://www.jianshu.com/p/2f94e9364ec4
https://juejin.im/post/6844903917650722829
https://zhuanlan.zhihu.com/p/74853110
https://juejin.im/post/6844903917650722829</p>

<p>https://www.jianshu.com/p/ebd8b012572e
https://www.jianshu.com/p/2f94e9364ec4
https://www.jianshu.com/p/bfc3c65c05d1</p>

<p>https://zhuanlan.zhihu.com/p/92210761
https://blog.csdn.net/u010853261/article/details/102945046
https://blog.csdn.net/hello_bravo_/article/details/103840054</p>

<p>https://segmentfault.com/a/1190000020086769
https://blog.csdn.net/cyq6239075/article/details/106412038
https://zhuanlan.zhihu.com/p/77943973</p>

<p>https://www.ardanlabs.com/blog/2018/12/garbage-collection-in-go-part1-semantics.html
https://www.ardanlabs.com/blog/2019/05/garbage-collection-in-go-part2-gctraces.html
https://www.ardanlabs.com/blog/2019/07/garbage-collection-in-go-part3-gcpacing.html</p>

<p>https://segmentfault.com/a/1190000022030353?utm_source=sf-related
https://www.jianshu.com/p/0083a90a8f7e</p>

<h2 id="memory">Memory</h2>

<p>https://www.jianshu.com/p/1ffde2de153f</p>

<p>##Stack
https://kirk91.github.io/posts/2d571d09/
http://yangxikun.github.io/golang/2019/11/12/go-goroutine-stack.html
https://zhuanlan.zhihu.com/p/28484133
https://agis.io/post/contiguous-stacks-golang/</p>

<h2 id="pointer">Pointer</h2>
<p>https://www.ardanlabs.com/blog/2017/05/language-mechanics-on-stacks-and-pointers.html
https://www.ardanlabs.com/blog/2017/05/language-mechanics-on-escape-analysis.html</p>

<h2 id="escape">Escape</h2>
<p>https://blog.csdn.net/qq_35587463/article/details/104221280
https://www.do1618.com/archives/1328/go-%E5%86%85%E5%AD%98%E9%80%83%E9%80%B8%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/
https://www.jianshu.com/p/518466b4ee96</p>

<h2 id="internal">Internal</h2>
<p>https://zhuanlan.zhihu.com/p/237870981</p>

<p>https://docs.google.com/document/d/13v_u3UrN2pgUtPnH4y-qfmlXwEEryikFu0SQiwk35SA/pub
https://docs.google.com/document/d/1lyPIbmsYbXnpNj57a261hgOYVpNRcgydurVQIyZOz_o/pub</p>

<p>https://zhuanlan.zhihu.com/p/266496735
http://dmitrysoshnikov.com/compilers/writing-a-memory-allocator/
https://studygolang.com/articles/22652?fr=sidebar
https://studygolang.com/articles/22500?fr=sidebar
https://www.cnblogs.com/unqiang/p/12052308.html
https://blog.csdn.net/weixin_33869377/article/details/89801587?utm_medium=distribute.pc_relevant.none-task-blog-title-7&amp;spm=1001.2101.3001.4242
https://zhuanlan.zhihu.com/p/53581298
https://github.com/dgraph-io/badger/tree/master/skl
https://dgraph.io/blog/post/manual-memory-management-golang-jemalloc/
https://zhuanlan.zhihu.com/p/266496735
https://www.jianshu.com/p/1ffde2de153f</p>

<p>https://www.jianshu.com/p/7405b4e11ee2
https://www.jianshu.com/p/518466b4ee96
https://zhuanlan.zhihu.com/p/59125443</p>

<p>https://www.jianshu.com/p/ebd8b012572e</p>

<h2 id="api">API</h2>

<p>https://netflixtechblog.com/practical-api-design-at-netflix-part-1-using-protobuf-fieldmask-35cfdc606518
https://netflixtechblog.com/practical-api-design-at-netflix-part-2-protobuf-fieldmask-for-mutation-operations-2e75e1d230e4
https://google.aip.dev/161</p>

<h2 id="中文">中文：</h2>
<p>https://mp.weixin.qq.com/s/8r4MBXJNkL1C99MIf82Afw
https://mp.weixin.qq.com/s/La8BCftoFyUEXg5SUjxIAg</p>

<p>https://developers.google.com/slides/api/guides/field-masks
https://google.aip.dev/161
https://linter.aip.dev/
https://google.aip.dev/general</p>

<p>https://mp.weixin.qq.com/s/FiqQVIvh2mBjxfMvgX4nNg</p>

<h2 id="ddd">DDD</h2>

<p>https://zhuanlan.zhihu.com/p/30843800
https://zhuanlan.zhihu.com/p/339334933</p>

<p>https://zhuanlan.zhihu.com/p/105466656
https://zhuanlan.zhihu.com/p/105648986
https://zhuanlan.zhihu.com/p/106634373
https://zhuanlan.zhihu.com/p/107347593
https://zhuanlan.zhihu.com/p/109048532
https://zhuanlan.zhihu.com/p/110252394</p>

<p>https://zhuanlan.zhihu.com/p/141908054
https://zhuanlan.zhihu.com/p/143573649
https://zhuanlan.zhihu.com/p/145205154</p>

<p>https://zhuanlan.zhihu.com/p/138884686</p>

<p>https://www.citerus.se/go-ddd/
https://www.citerus.se/part-2-domain-driven-design-in-go/
https://www.citerus.se/part-3-domain-driven-design-in-go/</p>

<p>https://www.jianshu.com/p/dfa427762975
https://www.jianshu.com/p/5732b69bd1a1</p>

<p>https://www.cnblogs.com/qixuejia/p/10789612.html
https://www.cnblogs.com/qixuejia/p/4390086.html
https://www.cnblogs.com/qixuejia/p/10789621.html</p>

<p>https://zhuanlan.zhihu.com/p/107347789</p>

<p>https://blog.csdn.net/taobaojishu/article/details/106152641
https://mp.weixin.qq.com/s/w1zqhWGuDPsCayiOgfxk6w</p>

<p>https://zhuanlan.zhihu.com/p/345679681</p>

<p>https://kb.cnblogs.com/tag/DDD/
https://kb.cnblogs.com/page/520743/
https://kb.cnblogs.com/page/520746/</p>

<p>https://www.infoq.cn/article/ddd-in-practice/</p>

<p>https://www.jianshu.com/p/ae473acea7de
https://blog.csdn.net/maoyeqiu/article/details/112788122</p>

<h2 id="阿里-ddd-系列分享">阿里 DDD 系列分享</h2>
<p>https://zhuanlan.zhihu.com/p/340911587
https://zhuanlan.zhihu.com/p/84223605
https://zhuanlan.zhihu.com/p/348706530
https://zhuanlan.zhihu.com/p/356518017
https://zhuanlan.zhihu.com/p/366395817</p>

<h2 id="project-layout">Project Layout</h2>

<p>https://www.youtube.com/watch?v=oL6JBUk6tj0
https://github.com/zitryss/go-sample
https://github.com/danceyoung/paper-code/blob/master/package-oriented-design/packageorienteddesign.md
https://medium.com/@eminetto/clean-architecture-using-golang-b63587aa5e3f
https://hackernoon.com/golang-clean-archithecture-efd6d7c43047
https://medium.com/@benbjohnson/standard-package-layout-7cdbc8391fc1
https://medium.com/wtf-dial/wtf-dial-domain-model-9655cd523182</p>

<p>https://hackernoon.com/golang-clean-archithecture-efd6d7c43047
https://hackernoon.com/trying-clean-architecture-on-golang-2-44d615bf8fdf
https://manuel.kiessling.net/2012/09/28/applying-the-clean-architecture-to-go-applications/
https://github.com/katzien/go-structure-examples
https://www.youtube.com/watch?v=MzTcsI6tn-0
https://www.appsdeveloperblog.com/dto-to-entity-and-entity-to-dto-conversion/
https://travisjeffery.com/b/2019/11/i-ll-take-pkg-over-internal/</p>

<p>https://github.com/google/wire/blob/master/docs/best-practices.md
https://github.com/google/wire/blob/master/docs/guide.md
https://blog.golang.org/wire
https://github.com/google/wire</p>

<h2 id="error-vs-exception">error vs exception</h2>
<p>https://www.infoq.cn/news/2012/11/go-error-handle/
https://golang.org/doc/faq#exceptions</p>

<p>https://www.ardanlabs.com/blog/2014/10/error-handling-in-go-part-i.html
https://www.ardanlabs.com/blog/2014/11/error-handling-in-go-part-ii.html
https://www.ardanlabs.com/blog/2017/05/design-philosophy-on-logging.html</p>

<p>https://medium.com/gett-engineering/error-handling-in-go-53b8a7112d04
https://medium.com/gett-engineering/error-handling-in-go-1-13-5ee6d1e0a55c</p>

<p>https://rauljordan.com/2020/07/06/why-go-error-handling-is-awesome.html
https://morsmachine.dk/error-handling
https://crawshaw.io/blog/xerrors</p>

<p>https://dave.cheney.net/2012/01/18/why-go-gets-exceptions-right
https://dave.cheney.net/2015/01/26/errors-and-exceptions-redux
https://dave.cheney.net/2014/11/04/error-handling-vs-exceptions-redux
https://dave.cheney.net/2014/12/24/inspecting-errors
https://dave.cheney.net/2016/04/07/constant-errors
https://dave.cheney.net/2019/01/27/eliminate-error-handling-by-eliminating-errors
https://dave.cheney.net/2016/06/12/stack-traces-and-the-errors-package
https://dave.cheney.net/2016/04/27/dont-just-check-errors-handle-them-gracefully</p>

<p>https://blog.golang.org/errors-are-values
https://blog.golang.org/error-handling-and-go
https://blog.golang.org/go1.13-errors
https://commandcenter.blogspot.com/2017/12/error-handling-in-upspin.html</p>

<h2 id="go2">go2</h2>
<p>https://go.googlesource.com/proposal/+/master/design/29934-error-values.md
https://go.googlesource.com/proposal/+/master/design/go2draft-error-handling.md
https://go.googlesource.com/proposal/+/master/design/go2draft-error-handling-overview.md</p>

<h2 id="goroutine">goroutine</h2>
<p>https://www.ardanlabs.com/blog/2014/01/concurrency-goroutines-and-gomaxprocs.html
https://www.ardanlabs.com/blog/2018/11/goroutine-leaks-the-forgotten-sender.html
https://www.ardanlabs.com/blog/2019/04/concurrency-trap-2-incomplete-work.html</p>

<p>https://github.com/go-kratos/kratos/blob/main/registry/registry.go</p>

<h2 id="memory-model">memory model</h2>
<p>https://cch123.github.io/ooo/
https://blog.csdn.net/qcrao/article/details/92759907
https://blog.csdn.net/caoshangpa/article/details/78853919
https://zhuanlan.zhihu.com/p/62249692
https://golang.org/ref/mem</p>

<h2 id="sync">sync</h2>

<p>data race
sync.atomic
errgroup
sync.pool</p>

<p>https://blog.golang.org/codelab-share
https://medium.com/a-journey-with-go/go-understand-the-design-of-sync-pool-2dde3024e277
https://medium.com/a-journey-with-go/go-how-are-deadlocks-triggered-2305504ac019
https://medium.com/a-journey-with-go/go-monitor-pattern-9decd26fb28
https://medium.com/a-journey-with-go/go-mutex-and-starvation-3f4f4e75ad50
https://medium.com/a-journey-with-go/go-how-to-reduce-lock-contention-with-the-atomic-package-ba3b2664b549
https://www.ardanlabs.com/blog/2013/09/detecting-race-conditions-with-go.html</p>

<h2 id="chan">chan</h2>
<p>https://www.ardanlabs.com/blog/2017/10/the-behavior-of-channels.html
https://medium.com/a-journey-with-go/go-buffered-and-unbuffered-channels-29a107c00268
https://medium.com/a-journey-with-go/go-ordering-in-select-statements-fd0ff80fd8d6</p>

<p>https://www.ardanlabs.com/blog/2017/10/the-behavior-of-channels.html
https://www.ardanlabs.com/blog/2014/02/the-nature-of-channels-in-go.html
https://www.ardanlabs.com/blog/2013/10/my-channel-select-bug.html</p>

<p>https://blog.golang.org/io2013-talk-concurrency
https://blog.golang.org/waza-talk
https://blog.golang.org/io2012-videos
https://blog.golang.org/concurrency-timeouts
https://blog.golang.org/pipelines
https://www.ardanlabs.com/blog/2014/02/running-queries-concurrently-against.html
https://blogtitle.github.io/go-advanced-concurrency-patterns-part-3-channels/</p>

<p>https://www.ardanlabs.com/blog/2013/05/thread-pooling-in-go-programming.html
https://www.ardanlabs.com/blog/2013/09/pool-go-routines-to-process-task.html</p>

<h2 id="context">context</h2>
<p>https://medium.com/a-journey-with-go/go-context-and-cancellation-by-propagation-7a808bbc889c
https://blog.golang.org/context
https://www.ardanlabs.com/blog/2019/09/context-package-semantics-in-go.html
https://zhuanlan.zhihu.com/p/34417106?hmsr=toutiao.io
https://medium.com/@cep21/how-to-correctly-use-context-context-in-go-1-7-8f2c0fafdf39</p>

<p>https://dave.cheney.net/2017/01/26/context-is-for-cancelation
https://dave.cheney.net/2017/08/20/context-isnt-for-cancellation</p>

<h2 id="quick-start">Quick Start：</h2>
<p>https://golang.org/doc/install
https://tour.golang.org/welcome/1</p>

<h2 id="语言层面">语言层面：</h2>
<p>《Effective Go》 https://golang.org/doc/effective_go.html  （我是看这个入门，官方推荐的文档，轻松易读
https://item.jd.com/12187988.html （比较详细的书籍</p>

<h2 id="实战--规范">实战 &amp; 规范：</h2>

<p>《Code Review Comments》
en：https://github.com/golang/go/wiki/CodeReviewComments
cn：https://studygolang.com/articles/10960</p>

<p>《High Performance Go Workshop》
https://dave.cheney.net/high-performance-go-workshop/dotgo-paris.html#overview</p>

<p>《Practical Go: Real world advice for writing maintainable Go programs》
https://dave.cheney.net/practical-go/presentations/qcon-china.html</p>

<h2 id="runtime">Runtime：</h2>
<p>https://draveness.me/golang/ （类似书籍比较多，还有一本雨痕的可以找找</p>

<h2 id="官方文档">官方文档：</h2>
<p>golang.org
godoc.org
=================</p>

<p>另外了解下B站的框架：
https://github.com/bilibili/kratos</p>]]></content><author><name></name></author><category term="golang" /><summary type="html"><![CDATA[Nodes GC]]></summary></entry><entry><title type="html">在golang中如何保障一个func只会执行一次</title><link href="https://blog.zhaogangtao.cn//golang/2022/01/29/golang-sync-once.html" rel="alternate" type="text/html" title="在golang中如何保障一个func只会执行一次" /><published>2022-01-29T00:00:00+08:00</published><updated>2022-01-29T00:00:00+08:00</updated><id>https://blog.zhaogangtao.cn//golang/2022/01/29/golang-sync-once</id><content type="html" xml:base="https://blog.zhaogangtao.cn//golang/2022/01/29/golang-sync-once.html"><![CDATA[<h1 id="在golang中如何保障一个func只会执行一次">在golang中如何保障一个func只会执行一次</h1>

<h2 id="背景">背景</h2>

<p>在项目开发中，会遇到这样的场景：</p>

<ol>
  <li>使用单例模式初始化一些开销比较大的资源</li>
</ol>

<p>遇到这样的问题时，打击第一个想法就是使用sync.Once或者atomic.Value</p>

<h3 id="如何使用atomic保障原子执行">如何使用atomic保障原子执行</h3>

<p>大家都知道atomic使用CAS机制保障了操作的原子性，那么使用cas能够保障func只执行一次吗？如下面示例：</p>

<div class="language-golang highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="p">(</span>
	<span class="s">"fmt"</span>
	<span class="s">"sync"</span>
	<span class="s">"sync/atomic"</span>
<span class="p">)</span>

<span class="k">var</span> <span class="p">(</span>
	<span class="n">done</span> <span class="kt">uint32</span>
	<span class="n">wg</span>   <span class="n">sync</span><span class="o">.</span><span class="n">WaitGroup</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">wg</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="m">2</span><span class="p">)</span>
	<span class="k">go</span> <span class="n">oncedo</span><span class="p">()</span>
	<span class="k">go</span> <span class="n">oncedo</span><span class="p">()</span>
	<span class="n">wg</span><span class="o">.</span><span class="n">Wait</span><span class="p">()</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">oncedo</span><span class="p">()</span> <span class="p">{</span>
	<span class="k">defer</span> <span class="n">wg</span><span class="o">.</span><span class="n">Done</span><span class="p">()</span>
	<span class="k">if</span> <span class="n">atomic</span><span class="o">.</span><span class="n">CompareAndSwapUint32</span><span class="p">(</span><span class="o">&amp;</span><span class="n">done</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">f</span><span class="p">()</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">f</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"func run"</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>f()正常执行下这个逻辑是没有问题的。但是如果并发执行时，第一个抢到执行机会的goruntine在执行过程中f()，会导致后续的goroutine立即返回抢占失败；如果这里是初始化db链接，没有抢占到执行的函数返回后，业务还需要感知db是否可用。</p>

<p>那么能否保证所有的goroutine在返回时都能保证f()是被调用完成呢？可否使用sync.Once来保障？可以的话sync.Once又是如何处理的呢？</p>

<p>打开sync.Once的源码，我们可以看到它是用了两端提交的思想来保证的。</p>

<ol>
  <li>首先，检查done是否已经执行过</li>
  <li>如果没有执行过，加锁执行f()</li>
  <li>后续goroutine进来后，如果f()未执行完成，会被mutex同步阻塞</li>
  <li>执行成功后，把done置为1，然后再释放锁</li>
</ol>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">o</span> <span class="o">*</span><span class="n">Once</span><span class="p">)</span> <span class="n">Do</span><span class="p">(</span><span class="n">f</span> <span class="k">func</span><span class="p">())</span> <span class="p">{</span>
	<span class="k">if</span> <span class="n">atomic</span><span class="o">.</span><span class="n">LoadUint32</span><span class="p">(</span><span class="o">&amp;</span><span class="n">o</span><span class="o">.</span><span class="n">done</span><span class="p">)</span> <span class="o">==</span> <span class="m">0</span> <span class="p">{</span>
		<span class="n">o</span><span class="o">.</span><span class="n">doSlow</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">o</span> <span class="o">*</span><span class="n">Once</span><span class="p">)</span> <span class="n">doSlow</span><span class="p">(</span><span class="n">f</span> <span class="k">func</span><span class="p">())</span> <span class="p">{</span>
	<span class="n">o</span><span class="o">.</span><span class="n">m</span><span class="o">.</span><span class="n">Lock</span><span class="p">()</span>
	<span class="k">defer</span> <span class="n">o</span><span class="o">.</span><span class="n">m</span><span class="o">.</span><span class="n">Unlock</span><span class="p">()</span>
	<span class="k">if</span> <span class="n">o</span><span class="o">.</span><span class="n">done</span> <span class="o">==</span> <span class="m">0</span> <span class="p">{</span>
		<span class="k">defer</span> <span class="n">atomic</span><span class="o">.</span><span class="n">StoreUint32</span><span class="p">(</span><span class="o">&amp;</span><span class="n">o</span><span class="o">.</span><span class="n">done</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span>
		<span class="n">f</span><span class="p">()</span>
	<span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="golang" /><summary type="html"><![CDATA[在golang中如何保障一个func只会执行一次]]></summary></entry><entry><title type="html">如何解决git squash merge冲突</title><link href="https://blog.zhaogangtao.cn//gitl/2019/03/01/git-squash-merge.html" rel="alternate" type="text/html" title="如何解决git squash merge冲突" /><published>2019-03-01T00:00:00+08:00</published><updated>2019-03-01T00:00:00+08:00</updated><id>https://blog.zhaogangtao.cn//gitl/2019/03/01/git-squash-merge</id><content type="html" xml:base="https://blog.zhaogangtao.cn//gitl/2019/03/01/git-squash-merge.html"><![CDATA[<h1 id="如何解决git-squash-merge冲突">如何解决git squash merge冲突</h1>

<h2 id="背景">背景</h2>

<p>公司项目使用了git大仓库管理代码，同一个仓库下会有多个业务代码。</p>

<p>平日里近百个开发在里面提交变更.</p>

<p>为了保证master的commit记录整洁，在提交mr时默认开启了gitlab的‘Squash commits when merge request is accepted’。</p>

<p>当有多部门系统开发时，有时会出现多部门同时基于一个非稳定分支开发（为了保持快速业务迭代）。</p>

<p>比如基础部门从master切出新分支，开发基础API，这里标记为：dev_base，在目录dev/app/base下coding。</p>

<p>当dev_base完成基础api开发，后部门A基于dev_base checkout一个分支：dev_a，在目录dev/app/a下coding，会引用dev/app/base的api。</p>

<p>后续dev_base和dev_a并行开发。</p>

<p>但是当dev_base开发完成，使用squash commits功能合并了master后。</p>

<p>这时dev_a合并master时，会在目录dev/app/base下存在大量冲突，然而他们从未变更过这个目录。</p>

<h2 id="如何正确解决这个冲突">如何正确解决这个冲突：</h2>

<p>先给出答案：</p>

<blockquote>
  <p>git merge –squash dev_base <br />
git pull origin master  <br />
git push origin dev_a</p>
</blockquote>

<h2 id="这里发生了什么">这里发生了什么？</h2>

<p>todo</p>]]></content><author><name></name></author><category term="gitl" /><summary type="html"><![CDATA[如何解决git squash merge冲突]]></summary></entry><entry><title type="html">Java项目问题排查规则</title><link href="https://blog.zhaogangtao.cn//mvn/2018/07/10/java-product-troubshoting.html" rel="alternate" type="text/html" title="Java项目问题排查规则" /><published>2018-07-10T09:34:38+08:00</published><updated>2018-07-10T09:34:38+08:00</updated><id>https://blog.zhaogangtao.cn//mvn/2018/07/10/java-product-troubshoting</id><content type="html" xml:base="https://blog.zhaogangtao.cn//mvn/2018/07/10/java-product-troubshoting.html"><![CDATA[<h2 id="问题分类">问题分类</h2>

<ol>
  <li>CPU占用率高</li>
  <li>内存泄露</li>
</ol>

<h2 id="cpu占用率高">CPU占用率高</h2>

<ol>
  <li>在容器内执行top命令，找到cpu使用率高的pid</li>
  <li>执行top -pid xxx，查看当前pid2的具体信息</li>
  <li>按照cpu占用率排序，找到占有率最高的pid</li>
  <li>使用jstack pid打印当前java线程的执行情况</li>
  <li>命令行printf %0x pid2查看对应的16进制nid</li>
  <li>这jstack的thread dump中观察对应的栈信息</li>
</ol>

<h2 id="内存使用率高">内存使用率高</h2>

<ol>
  <li>jps -lvm找到当前容器运行的java线程</li>
  <li>找到对应问题的线程后执行，jmap -heap:format=b file=mem.bin pid</li>
  <li>使用mat或者jprofiler导入dump后，分析</li>
  <li>观察占用率较高的对象分布，基本可以确定问题</li>
</ol>]]></content><author><name></name></author><category term="mvn" /><summary type="html"><![CDATA[问题分类]]></summary></entry><entry><title type="html">Deploy jar to mvn nexus repository</title><link href="https://blog.zhaogangtao.cn//mvn/2018/01/02/mvn-deplpy-to-nexus.html" rel="alternate" type="text/html" title="Deploy jar to mvn nexus repository" /><published>2018-01-02T17:34:38+08:00</published><updated>2018-01-02T17:34:38+08:00</updated><id>https://blog.zhaogangtao.cn//mvn/2018/01/02/mvn-deplpy-to-nexus</id><content type="html" xml:base="https://blog.zhaogangtao.cn//mvn/2018/01/02/mvn-deplpy-to-nexus.html"><![CDATA[<h1 id="deploy-jar-to-mvn-nexus-repository">Deploy jar to mvn nexus repository</h1>

<h2 id="add-server-config-to-settingsxml">Add server config to settings.xml</h2>
<p>进入.m2文件夹，更改settings.xml，添加server配置</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    &lt;server&gt;
       &lt;id&gt;my-nexus-release-server&lt;/id&gt;
       &lt;username&gt;xxxx&lt;/username&gt;
       &lt;password&gt;xxxx&lt;/password&gt;
     &lt;/server&gt;
</code></pre></div></div>
<h2 id="更改pomxml">更改pom.xml</h2>
<p>新增deploy仓库配置：</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> &lt;distributionManagement&gt;
		&lt;repository&gt;
			&lt;id&gt;my-nexus-release-server&lt;/id&gt;
			&lt;name&gt;Internal Releases&lt;/name&gt;
			&lt;url&gt;http://nexus.my.co/content/repositories/releases&lt;/url&gt;
		&lt;/repository&gt;
		&lt;snapshotRepository&gt;
			&lt;id&gt;my-nexus-snapshots-server&lt;/id&gt;
			&lt;name&gt;Internal Snapshots&lt;/name&gt;
			&lt;url&gt;http://nexus.my.co/content/repositories/snapshots&lt;/url&gt;
		&lt;/snapshotRepository&gt;
	&lt;/distributionManagement&gt;
</code></pre></div></div>
<p>如果要上传source包，新增：</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;plugin&gt;
    &lt;artifactId&gt;maven-source-plugin&lt;/artifactId&gt;
    &lt;version&gt;3.0.1&lt;/version&gt;
    &lt;configuration&gt;
        &lt;attach&gt;true&lt;/attach&gt;
    &lt;/configuration&gt;
    &lt;executions&gt;
        &lt;execution&gt;
            &lt;phase&gt;compile&lt;/phase&gt;
            &lt;goals&gt;
                &lt;goal&gt;jar&lt;/goal&gt;
            &lt;/goals&gt;
        &lt;/execution&gt;
    &lt;/executions&gt;
&lt;/plugin&gt;
</code></pre></div></div>]]></content><author><name></name></author><category term="mvn" /><summary type="html"><![CDATA[Deploy jar to mvn nexus repository]]></summary></entry><entry><title type="html">Golang compile tool</title><link href="https://blog.zhaogangtao.cn//go/2017/11/21/go-tool-compile.html" rel="alternate" type="text/html" title="Golang compile tool" /><published>2017-11-21T20:34:38+08:00</published><updated>2017-11-21T20:34:38+08:00</updated><id>https://blog.zhaogangtao.cn//go/2017/11/21/go-tool-compile</id><content type="html" xml:base="https://blog.zhaogangtao.cn//go/2017/11/21/go-tool-compile.html"><![CDATA[<h1 id="golang-compile-tool">Golang compile tool</h1>

<h2 id="command">Command</h2>
<p>go tool compile -m -importmap go-common/log=tlog/vendor/go-common/log -D /Users/tommy/work/src/tlog  -I /Users/tommy/work/pkg/darwin_amd64  -S  main.go &gt; test/test1.s</p>]]></content><author><name></name></author><category term="go" /><summary type="html"><![CDATA[Golang compile tool]]></summary></entry><entry><title type="html">Golang获取本机IP地址</title><link href="https://blog.zhaogangtao.cn//go/2017/08/29/go-internal-ip-address.html" rel="alternate" type="text/html" title="Golang获取本机IP地址" /><published>2017-08-29T20:34:38+08:00</published><updated>2017-08-29T20:34:38+08:00</updated><id>https://blog.zhaogangtao.cn//go/2017/08/29/go-internal-ip-address</id><content type="html" xml:base="https://blog.zhaogangtao.cn//go/2017/08/29/go-internal-ip-address.html"><![CDATA[<h1 id="golang获取本机ip地址">Golang获取本机IP地址</h1>

<h2 id="引子">引子</h2>
<p>最近有次灰度发版后，发现RPC client获取到一个莫名的RPC server ip，通过服务注册的管理界面也能看到这个IP，排查后发现是当前灰度的机器，但是此机器的IP并不是注册的ip。</p>

<p>排查代码后发现，先有注册的逻辑是这样的:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// InternalIP get internal ip.
func InternalIP() string {
	addrs, err := net.InterfaceAddrs()
	if err != nil {
		return ""
	}
	for _, a := range addrs {
		if ipnet, ok := a.(*net.IPNet); ok &amp;&amp; !ipnet.IP.IsLoopback() {
			if ipnet.IP.To4() != nil {
				return ipnet.IP.String()
			}
		}
	}
	return ""
}
</code></pre></div></div>
<p>获取排除loopback地址后的ip。</p>

<p>But, 诡异的地方就是这个IsLoopback:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// IsLoopback reports whether ip is a loopback address.
func (ip IP) IsLoopback() bool {
	if ip4 := ip.To4(); ip4 != nil {
		return ip4[0] == 127
	}
	return ip.Equal(IPv6loopback)
}

</code></pre></div></div>
<p>它是通过判断非127开头的IP来判断的。</p>

<p>但是，我们服务灰度的这台物理机上绑定了个loopbakc，ip为：172开头。
so，逻辑失效。
发现问题后，更改了下获取本机IP的逻辑，如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// InternalIP get internal ip.
func InternalIP() string {
	inters, err := net.Interfaces()
	if err != nil {
		return ""
	}
	for _, inter := range inters {
		if !strings.HasPrefix(inter.Name, "lo") {
			addrs, err := inter.Addrs()
			if err != nil {
				continue
			}
			for _, addr := range addrs {
				if ipnet, ok := addr.(*net.IPNet); ok &amp;&amp; !ipnet.IP.IsLoopback() {
					if ipnet.IP.To4() != nil {
						return ipnet.IP.String()
					}
				}
			}
		}
	}
	return ""
}

</code></pre></div></div>]]></content><author><name></name></author><category term="go" /><summary type="html"><![CDATA[Golang获取本机IP地址]]></summary></entry><entry><title type="html">Kafka中有两种consumer接口</title><link href="https://blog.zhaogangtao.cn//kafka/2017/04/27/kafka-consumer.html" rel="alternate" type="text/html" title="Kafka中有两种consumer接口" /><published>2017-04-27T20:34:38+08:00</published><updated>2017-04-27T20:34:38+08:00</updated><id>https://blog.zhaogangtao.cn//kafka/2017/04/27/kafka-consumer</id><content type="html" xml:base="https://blog.zhaogangtao.cn//kafka/2017/04/27/kafka-consumer.html"><![CDATA[<h1 id="kafka-consumer">Kafka consumer</h1>

<p>Kafka中有两种consumer接口，分别为Low-level API和High-levelAPI</p>

<h2 id="low-level-api--simpleconsumer">Low-level API  SimpleConsumer</h2>
<blockquote>
  <p>这套接口比较复杂的，使用者必须要考虑很多事情，优点就是对Kafka可以有完全的控制。</p>
</blockquote>

<h2 id="high-level-api-zookeeperconsumerconnector">High-level API ZookeeperConsumerConnector</h2>
<blockquote>
  <p>High-level API使用比较简单，已经封装了对partition和offset的管理，默认是会定期自动commit offset，这样可能会丢数据的，因为consumer可能拿到数据没有处理完crash。 High-level API接口的特点，自动管理，使用简单，但是对Kafka的控制不够灵活。</p>
</blockquote>]]></content><author><name></name></author><category term="kafka" /><summary type="html"><![CDATA[Kafka consumer]]></summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="https://blog.zhaogangtao.cn//jekyll/update/2017/04/27/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2017-04-27T10:34:38+08:00</published><updated>2017-04-27T10:34:38+08:00</updated><id>https://blog.zhaogangtao.cn//jekyll/update/2017/04/27/welcome-to-jekyll</id><content type="html" xml:base="https://blog.zhaogangtao.cn//jekyll/update/2017/04/27/welcome-to-jekyll.html"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>To add new posts, simply add a file in the <code class="language-plaintext highlighter-rouge">_posts</code> directory that follows the convention <code class="language-plaintext highlighter-rouge">YYYY-MM-DD-name-of-post.ext</code> and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.]]></summary></entry></feed>